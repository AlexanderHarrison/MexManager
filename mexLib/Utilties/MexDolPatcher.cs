using GCILib;
using System.IO.Compression;
using System.Security.Cryptography;

namespace mexLib.Utilties
{

    public class MexDolPatcher
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="vanilla"></param>
        /// <param name="patched"></param>
        public static void CreatePatch(byte[] source, byte[] patched, string filePath)
        {
            using FileStream s = new(filePath, FileMode.Create);
            {
                using SHA256 sha256 = SHA256.Create();
                {
                    byte[] hash1 = sha256.ComputeHash(source);
                    byte[] hash2 = sha256.ComputeHash(patched);

                    s.Write(BitConverter.GetBytes(source.Length), 0, 4);
                    s.Write(BitConverter.GetBytes(patched.Length), 0, 4);
                    s.Write(hash1, 0, 0x20);
                    s.Write(hash2, 0, 0x20);
                }

                using DeflateStream w = new(s, CompressionLevel.Optimal);
                {
                    for (int i = 0; i < Math.Min(source.Length, patched.Length); i++)
                    {
                        int diff_end = i;

                        // check if diff stating
                        if (source[i] != patched[i])
                        {
                            // linear future search
                            // if the data is the same for at least 0x20 bytes, then call it a day
                            int same = 0;
                            for (int j = i; j < source.Length; j++)
                            {
                                if (source[j] == patched[j])
                                    same += 1;
                                else
                                    same = 0;

                                if (same > 0x20)
                                {
                                    diff_end = j - 0x20;
                                    break;
                                }
                            }
                        }

                        // write diff patch
                        if (i != diff_end)
                        {
                            w.Write(BitConverter.GetBytes(i), 0, 4);
                            w.Write(BitConverter.GetBytes((diff_end - i)), 0, 4);
                            w.Write(patched, i, diff_end - i);
                        }

                        // set i to end of diff section
                        i = diff_end;
                    }

                    // write missing data
                    if (patched.Length > source.Length)
                    {
                        w.Write(BitConverter.GetBytes(source.Length), 0, 4);
                        w.Write(BitConverter.GetBytes((patched.Length - source.Length)), 0, 4);
                        w.Write(patched, source.Length, patched.Length - source.Length);
                    }
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public static bool TryApplyPatch(byte[] source, out byte[] patched)
        {
            byte[] patch = PatchFile;
            patched = source;

            using SHA256 sha256 = SHA256.Create();
            using MemoryStream s = new(patch);
            {
                int size1 = (s.ReadByte() & 0xFF) | ((s.ReadByte() & 0xFF) << 8) | ((s.ReadByte() & 0xFF) << 16) | ((s.ReadByte() & 0xFF) << 24);
                int size2 = (s.ReadByte() & 0xFF) | ((s.ReadByte() & 0xFF) << 8) | ((s.ReadByte() & 0xFF) << 16) | ((s.ReadByte() & 0xFF) << 24);
                byte[] hash1 = s.ReadBytes(0x20);
                byte[] hash2 = s.ReadBytes(0x20);

                byte[] sourceHash = sha256.ComputeHash(source);

                if (source.Length != size1 ||
                    !hash1.SequenceEqual(sourceHash))
                    return false;

                patched = new byte[size2];
                Array.Copy(source, 0, patched, 0, Math.Min(size1, size2));

                using DeflateStream r = new(s, CompressionMode.Decompress);
                {
                    while (true)
                    {
                        int offset = (r.ReadByte() & 0xFF) | ((r.ReadByte() & 0xFF) << 8) | ((r.ReadByte() & 0xFF) << 16) | ((r.ReadByte() & 0xFF) << 24);
                        int length = (r.ReadByte() & 0xFF) | ((r.ReadByte() & 0xFF) << 8) | ((r.ReadByte() & 0xFF) << 16) | ((r.ReadByte() & 0xFF) << 24);

                        if (offset == -1 && length == -1)
                            break;

                        for (int i = 0; i < length; i++)
                            patched[offset + i] = (byte)r.ReadByte();
                    }
                }

                byte[] patchedHash = sha256.ComputeHash(patched);
                if (!hash2.SequenceEqual(patchedHash))
                {
                    patched = source;
                    return false;
                }
            }
            return true;
        }

        /// <summary>
        /// Returns true if patch is already applied to dol
        /// </summary>
        /// <param name="dol"></param>
        /// <param name="filePath"></param>
        /// <returns></returns>
        public static bool CheckPatchApplied(byte[] source)
        {
            using SHA256 sha256 = SHA256.Create();
            using MemoryStream s = new(PatchFile);
            {
                int size1 = (s.ReadByte() & 0xFF) | ((s.ReadByte() & 0xFF) << 8) | ((s.ReadByte() & 0xFF) << 16) | ((s.ReadByte() & 0xFF) << 24);
                int size2 = (s.ReadByte() & 0xFF) | ((s.ReadByte() & 0xFF) << 8) | ((s.ReadByte() & 0xFF) << 16) | ((s.ReadByte() & 0xFF) << 24);
                byte[] hash1 = s.ReadBytes(0x20);
                byte[] hash2 = s.ReadBytes(0x20);

                byte[] sourceHash = sha256.ComputeHash(source);

                if (source.Length == size2 &&
                    hash2.SequenceEqual(sourceHash))
                    return true;
            }
            return false;
        }

        /// <summary>
        /// 
        /// </summary>
        public static readonly byte[] PatchFile =
        {
            0x00, 0x86, 0x43, 0x00, 0xE0, 0x85, 0x43, 0x00, 0xC6, 0xB4, 0xCF, 0x23, 0x8B, 0x0B, 0xA8, 0x38, 0xCE, 0xBE, 0xC5, 0x24, 0x82, 0x02, 0x90, 0x63, 0xAD, 0x92, 0x1A, 0x61, 0x0A, 0xD6, 0xC7, 0x7B, 0x86, 0xA8, 0xEA, 0x4D, 0x49, 0x5F, 0x6D, 0x35, 0xF6, 0x04, 0xE1, 0x39, 0x9F, 0x2D, 0xC8, 0x8E, 0x2F, 0xBB, 0xAA, 0x2B, 0x34, 0x41, 0x86, 0x7C, 0xA3, 0x4D, 0x00, 0xB9, 0x9B, 0x82, 0xE1, 0x6B, 0xEE, 0x4E, 0x4E, 0xF1, 0x08, 0x60, 0x48, 0x05, 0xED, 0x5A, 0x6F, 0x4C, 0x1B, 0xE7, 0x19, 0x7F, 0xCE, 0x3E, 0x83, 0x69, 0x4F, 0xAB, 0x27, 0xDD, 0x12, 0x37, 0x43, 0xE1, 0x00, 0xB7, 0x09, 0x89, 0xEB, 0x00, 0x21, 0x99, 0x0D, 0xDE, 0xE5, 0x6E, 0x24, 0x9B, 0x1B, 0xB7, 0x9D, 0xA3, 0xBE, 0x2E, 0x2D, 0xDA, 0x24, 0x83, 0x61, 0x94, 0xC2, 0x02, 0x8C, 0x68, 0xBB, 0x46, 0x77, 0xF6, 0x41, 0x9C, 0x25, 0xA4, 0x2E, 0x31, 0x09, 0x5B, 0x53, 0x5A, 0x55, 0x0E, 0x59, 0xDC, 0x64, 0x63, 0xAC, 0xCD, 0x34, 0xA9, 0xA3, 0xC8, 0x42, 0x6A, 0x26, 0xB1, 0x25, 0x9A, 0xD8, 0x14, 0x4D, 0x7C, 0xE8, 0xAA, 0x68, 0xA5, 0x4A, 0x26, 0x45, 0x0A, 0xDB, 0x2A, 0x85, 0x04, 0xE2, 0xDB, 0xF3, 0x9E, 0x61, 0x1F, 0xF6, 0xA9, 0x1F, 0x37, 0xE9, 0x7E, 0x92, 0x79, 0x9E, 0x7B, 0xDF, 0xE7, 0x7D, 0xFE, 0xBF, 0xCF, 0xDD, 0x07, 0x96, 0x00, 0x80, 0xC7, 0xDF, 0x73, 0xE4, 0xF9, 0x66, 0xA1, 0xCE, 0x57, 0x5B, 0x0F, 0xCF, 0x36, 0x3F, 0x2B, 0xFC, 0xB0, 0xC1, 0x57, 0xEF, 0xAB, 0x5B, 0xDE, 0xC5, 0x00, 0x8B, 0x7B, 0xF2, 0x30, 0x28, 0xCD, 0xD7, 0xBE, 0x02, 0x0C, 0xF2, 0x8E, 0x9F, 0x9D, 0xA8, 0x87, 0x59, 0x1F, 0x72, 0x50, 0xF6, 0x22, 0xFD, 0xFB, 0xBF, 0x8A, 0xF1, 0x4A, 0xE3, 0xC5, 0x0C, 0x03, 0x4E, 0xD5, 0x69, 0xCB, 0x21, 0x9D, 0x52, 0x01, 0x9E, 0x44, 0xCA, 0xA9, 0x65, 0xE6, 0xB3, 0x4B, 0x65, 0x4C, 0xCA, 0xCF, 0xB6, 0x81, 0x3B, 0xA1, 0x43, 0xAE, 0x7D, 0x42, 0x80, 0xC1, 0xD6, 0xFB, 0x46, 0x52, 0x62, 0x3C, 0x8B, 0x32, 0x9C, 0x5B, 0x6C, 0x83, 0xEC, 0xBE, 0x9B, 0x3A, 0x04, 0x63, 0xD7, 0xE1, 0xC2, 0x31, 0xC9, 0x15, 0xFF, 0x09, 0x18, 0x57, 0x2E, 0x48, 0xAE, 0xE4, 0x25, 0x5B, 0x4E, 0x3D, 0x5D, 0xAD, 0xC4, 0x6F, 0x01, 0x04, 0xE7, 0x74, 0x50, 0x17, 0x76, 0x2B, 0x01, 0xB4, 0x17, 0x8C, 0xC1, 0x42, 0x2C, 0x3E, 0xF7, 0x89, 0x7E, 0x1A, 0x40, 0xB5, 0x0B, 0x20, 0x0D, 0x83, 0x1B, 0x79, 0x76, 0x9D, 0xE7, 0x02, 0x77, 0xC1, 0x19, 0x02, 0x88, 0x24, 0x2F, 0xD9, 0x73, 0x54, 0xE7, 0xAF, 0x51, 0xE7, 0x3C, 0xDA, 0x99, 0x47, 0x3B, 0x09, 0x9D, 0xF1, 0xE8, 0xD4, 0x47, 0xA7, 0x3D, 0x87, 0x94, 0x53, 0x1F, 0xFB, 0x87, 0x80, 0xD4, 0xA5, 0x96, 0x99, 0xCF, 0xBC, 0xCA, 0xD8, 0x73, 0x1F, 0xA0, 0x9F, 0xC8, 0x3B, 0xFD, 0x95, 0x70, 0xE9, 0x19, 0x60, 0xBC, 0xCF, 0xE9, 0x20, 0xE8, 0x7D, 0x00, 0xD4, 0x06, 0xD5, 0x3D, 0x50, 0x06, 0xCC, 0xAE, 0x11, 0x80, 0x80, 0x00, 0x40, 0x5E, 0xA9, 0x48, 0x90, 0xCE, 0x7D, 0x89, 0x23, 0x3D, 0x2E, 0x20, 0x71, 0xA6, 0x40, 0xED, 0x93, 0xEB, 0xC0, 0xA1, 0x7D, 0x67, 0x82, 0x3B, 0xA6, 0xF8, 0x1C, 0x00, 0xDE, 0x47, 0x80, 0x91, 0xB3, 0xE0, 0x95, 0x27, 0x61, 0x09, 0x79, 0xBB, 0x9C, 0x65, 0xA6, 0xE4, 0x61, 0x5B, 0x04, 0x79, 0x87, 0xAC, 0xDB, 0x6E, 0xC8, 0x93, 0xEC, 0x4D, 0xE4, 0x4B, 0xE5, 0xAC, 0x03, 0xCF, 0x39, 0x96, 0xB5, 0xF4, 0x16, 0xDE, 0xEB, 0x40, 0xB9, 0x61, 0x08, 0xC9, 0x43, 0x10, 0x93, 0xF2, 0x46, 0x0A, 0xF5, 0x30, 0xF2, 0x18, 0x78, 0xC9, 0xA9, 0x94, 0x28, 0x9F, 0x41, 0x7F, 0x47, 0xDA, 0xA6, 0x03, 0x35, 0xC0, 0xA0, 0x1D, 0x4E, 0x1D, 0x89, 0xFB, 0x90, 0xB7, 0xED, 0x39, 0x68, 0x18, 0x52, 0xD6, 0x58, 0x0A, 0x1B, 0x06, 0x89, 0xA6, 0xA1, 0x31, 0x93, 0x06, 0x40, 0x3E, 0xA4, 0x8E, 0x54, 0x2B, 0xD2, 0x3B, 0xEC, 0xFC, 0x9E, 0x1A, 0xC3, 0x90, 0x75, 0x76, 0x4E, 0xBD, 0xAC, 0x4C, 0xAB, 0x97, 0xDB, 0xA6, 0x71, 0x6F, 0x99, 0xC6, 0x83, 0xFA, 0x3D, 0xFA, 0xAF, 0x8C, 0x95, 0xA1, 0x3E, 0x63, 0x8D, 0xBC, 0xCF, 0x8A, 0xE4, 0xE7, 0xC7, 0x45, 0x72, 0x71, 0x9B, 0xE8, 0x3B, 0x8E, 0x36, 0x7F, 0x0A, 0x2E, 0xF9, 0x37, 0x98, 0x17, 0xB4, 0x87, 0xB6, 0xD0, 0x6E, 0xDC, 0x47, 0x63, 0xC3, 0x67, 0x9F, 0x9A, 0x6A, 0xE5, 0xB5, 0x9A, 0x53, 0xBC, 0x69, 0x57, 0x37, 0x6E, 0x84, 0x8D, 0xC2, 0xC7, 0xA4, 0xBB, 0xD4, 0x40, 0xBF, 0x5D, 0x51, 0xE7, 0x4A, 0x62, 0x23, 0x4F, 0xA8, 0x87, 0x7D, 0xEA, 0x14, 0x38, 0x0E, 0x39, 0x9D, 0x41, 0xE9, 0x1D, 0x50, 0xE4, 0xD7, 0xD9, 0x0F, 0x68, 0x8C, 0x72, 0x1A, 0x38, 0x79, 0x1C, 0x6A, 0x51, 0x5F, 0xB9, 0x34, 0x8E, 0x67, 0xD0, 0xE7, 0xA1, 0x5E, 0x00, 0xFA, 0x8C, 0x7C, 0xF0, 0x3C, 0xF2, 0xEA, 0x88, 0xB0, 0x12, 0xAD, 0x49, 0x89, 0x5A, 0x4F, 0xC8, 0x4F, 0x52, 0xAC, 0x98, 0x7C, 0x54, 0x90, 0xFA, 0x2F, 0x9B, 0xB9, 0x71, 0x7B, 0xCB, 0xC0, 0x46, 0x29, 0xE6, 0xA8, 0x5C, 0x9A, 0x00, 0x01, 0xCF, 0xB9, 0xE5, 0x09, 0x70, 0x53, 0x3F, 0xE5, 0x37, 0xC1, 0x45, 0xFD, 0x94, 0xCF, 0x81, 0xB3, 0xCD, 0x09, 0x8C, 0x34, 0x5A, 0x90, 0xE4, 0xF1, 0x42, 0x10, 0x63, 0x5C, 0x41, 0x1F, 0x84, 0xFE, 0x5E, 0xDC, 0xC3, 0x5A, 0x0D, 0x70, 0x18, 0x23, 0xFA, 0x1B, 0x78, 0x0D, 0x5C, 0x87, 0x5E, 0xB3, 0xEF, 0xA5, 0x67, 0xA2, 0x3D, 0xA5, 0x9B, 0xC6, 0x50, 0x0E, 0xE3, 0xE1, 0xA4, 0x7C, 0xC1, 0x49, 0xBA, 0x37, 0xCD, 0x90, 0xC3, 0x27, 0x0A, 0x4F, 0x8D, 0x62, 0x2C, 0x0E, 0x60, 0xFB, 0xA7, 0xC1, 0xEE, 0x1B, 0x45, 0xDB, 0xE3, 0xC0, 0x63, 0x7E, 0x22, 0x6A, 0x47, 0x69, 0x83, 0x9A, 0x3A, 0xCA, 0xE3, 0xD9, 0x97, 0x49, 0xE7, 0xBB, 0x34, 0x7E, 0x4E, 0xDB, 0x16, 0xC2, 0xFC, 0x1C, 0xE4, 0xE5, 0x51, 0xCC, 0x55, 0xBA, 0x8A, 0x47, 0x79, 0x9A, 0x4B, 0xA7, 0x9E, 0xC2, 0x9E, 0x89, 0x77, 0x51, 0x99, 0xA0, 0x94, 0xC1, 0xDA, 0xA5, 0xEA, 0xE9, 0xB9, 0x5A, 0x35, 0x35, 0x4C, 0xE9, 0xF6, 0xFF, 0x3E, 0x6F, 0xCA, 0x5C, 0xAF, 0xF4, 0x85, 0x8D, 0x87, 0x7A, 0x82, 0x33, 0xA9, 0x62, 0xAE, 0xFD, 0xB8, 0x5A, 0x41, 0xBE, 0x57, 0xCD, 0x98, 0xB4, 0x83, 0x8C, 0x6C, 0x55, 0xB0, 0x07, 0x24, 0xEC, 0x1B, 0x9B, 0xAC, 0x43, 0x88, 0xF4, 0x44, 0x68, 0x8E, 0x78, 0xCC, 0x0D, 0xBD, 0x0B, 0x2E, 0x39, 0xFF, 0x50, 0xA2, 0xB1, 0x49, 0xF9, 0x87, 0x7E, 0xB3, 0xB7, 0x86, 0x70, 0x6D, 0x12, 0x5C, 0xDA, 0xAD, 0x10, 0xD5, 0xE9, 0xD1, 0x6E, 0x3D, 0xED, 0xA3, 0x71, 0x90, 0xD4, 0x16, 0x45, 0xBB, 0x5B, 0xC5, 0xE3, 0x9A, 0x0B, 0x65, 0x39, 0xF5, 0x5D, 0xF4, 0xE1, 0x0C, 0xF0, 0xA4, 0x83, 0x15, 0xC7, 0x3E, 0x03, 0xC8, 0x60, 0x2D, 0xC3, 0xC6, 0xDA, 0xE7, 0x43, 0x4F, 0x00, 0x8B, 0xF9, 0x07, 0x79, 0x72, 0xED, 0x76, 0x00, 0xFB, 0x6A, 0x0C, 0x9F, 0x87, 0x70, 0x1F, 0xF7, 0x16, 0xA5, 0xFC, 0xDA, 0x0D, 0xD2, 0xB3, 0x69, 0x26, 0xF9, 0xAD, 0x56, 0x7E, 0xA8, 0x11, 0xE3, 0x3D, 0xDC, 0x95, 0xC7, 0x9E, 0xA5, 0x3D, 0xEC, 0x90, 0x32, 0xCC, 0x11, 0xA4, 0x76, 0x8C, 0x21, 0x43, 0x7B, 0x9A, 0x74, 0x9E, 0xA0, 0xF1, 0x9A, 0x39, 0xDA, 0xF5, 0x25, 0xAC, 0xD3, 0x19, 0xF0, 0xC8, 0xBF, 0x35, 0xEB, 0xC8, 0x9D, 0xC4, 0x5C, 0xA1, 0xCF, 0x2B, 0xD9, 0x22, 0x5D, 0xD6, 0x8B, 0xF4, 0x36, 0x19, 0xFC, 0x4C, 0x44, 0x19, 0x01, 0x65, 0x5C, 0x6F, 0x7A, 0x00, 0xFC, 0x29, 0xF3, 0x1E, 0xB8, 0xDF, 0x2F, 0xF2, 0x36, 0x7A, 0x27, 0xC6, 0x8A, 0x3C, 0xBB, 0x77, 0x70, 0xA3, 0x37, 0xD7, 0xA4, 0xFF, 0xD8, 0x4A, 0xB5, 0xF3, 0x03, 0xBF, 0x33, 0xEB, 0xFE, 0x36, 0xCD, 0x31, 0xCA, 0x8F, 0x93, 0x57, 0x4E, 0xE4, 0xC9, 0xE8, 0xA6, 0x99, 0x44, 0xD7, 0x0F, 0x68, 0xBC, 0xCE, 0x46, 0xBC, 0x0B, 0xFA, 0x04, 0xC0, 0xD0, 0x6E, 0x80, 0x81, 0xB0, 0x29, 0xEB, 0x54, 0x27, 0xAA, 0x15, 0xE4, 0x69, 0xCF, 0xB9, 0xB4, 0xDD, 0x61, 0x45, 0xBA, 0x82, 0x77, 0xBC, 0x77, 0x82, 0x27, 0x9D, 0x5D, 0xFB, 0x30, 0xA7, 0x65, 0x92, 0x0E, 0x04, 0x75, 0xBD, 0xAA, 0x8E, 0x54, 0x51, 0x9D, 0x92, 0x3A, 0x52, 0xF9, 0x17, 0xA4, 0x7E, 0xCD, 0x53, 0xAD, 0xD0, 0x1A, 0x6B, 0x1E, 0xC1, 0x4F, 0x6B, 0xAC, 0x79, 0xAA, 0xE8, 0xB3, 0x80, 0xCF, 0xB4, 0xF7, 0xDD, 0x9A, 0xC7, 0x43, 0xA9, 0xEB, 0xBB, 0x1E, 0x41, 0xA4, 0x35, 0xD2, 0x3C, 0x4F, 0xD6, 0x66, 0xD0, 0x76, 0xD8, 0x58, 0x4D, 0xA3, 0xDE, 0x47, 0xE4, 0xA1, 0xD5, 0xD4, 0x5C, 0x2B, 0xC0, 0xDC, 0xA0, 0xF9, 0x82, 0xE0, 0xEE, 0x34, 0xBB, 0x76, 0x50, 0xB9, 0x3B, 0xCD, 0x70, 0x65, 0xA1, 0xD5, 0x94, 0xEB, 0xD0, 0x42, 0xB6, 0x1C, 0xB9, 0xB8, 0x55, 0xD1, 0x0E, 0xEE, 0xE0, 0x37, 0xFC, 0xD6, 0x42, 0xF6, 0x1C, 0x9D, 0x5D, 0x52, 0x7E, 0x75, 0x3F, 0xE9, 0x9E, 0x13, 0xB5, 0xD1, 0x38, 0xB5, 0xBB, 0x07, 0x6B, 0xC1, 0x25, 0xEA, 0x4C, 0x1F, 0x9D, 0x5A, 0x4D, 0x15, 0xD6, 0xF6, 0xEA, 0x3E, 0x7F, 0x96, 0xEA, 0x5E, 0x2D, 0xD7, 0x0E, 0x9C, 0x9C, 0xD6, 0x0E, 0x3C, 0x3D, 0xED, 0xBF, 0x08, 0x8C, 0xEA, 0x10, 0xE8, 0xFC, 0xB8, 0xE3, 0x3B, 0x05, 0x6C, 0xB4, 0x6E, 0xEF, 0x8C, 0xF7, 0xCB, 0x10, 0x4C, 0x6C, 0x3B, 0xE9, 0xC3, 0x19, 0xE7, 0xD4, 0xFE, 0x34, 0xA8, 0xD0, 0x7E, 0x9E, 0xAC, 0x03, 0x88, 0xD6, 0xBC, 0x30, 0x83, 0xBD, 0x10, 0xA4, 0x3D, 0x6B, 0xEE, 0xFD, 0xBE, 0xB8, 0x77, 0xBE, 0x06, 0x5F, 0x76, 0x68, 0x1F, 0x63, 0x60, 0x31, 0x37, 0xDB, 0xE9, 0x1C, 0xD2, 0x3E, 0x6A, 0xE7, 0xA3, 0x7F, 0x84, 0x20, 0xEA, 0xFD, 0xA5, 0x9A, 0x12, 0x56, 0xE8, 0x9D, 0xD6, 0x76, 0x0A, 0xFE, 0x04, 0xE6, 0x06, 0xE3, 0xB8, 0x4A, 0x7A, 0x96, 0x44, 0xA4, 0xB3, 0x34, 0xD7, 0x24, 0xE5, 0xF6, 0x63, 0x2D, 0x04, 0xBC, 0xAF, 0x9C, 0x76, 0xDB, 0x8C, 0xA5, 0x52, 0x5B, 0x3A, 0xCA, 0xE3, 0xCC, 0x2A, 0x8D, 0xDE, 0x05, 0x94, 0x7F, 0xD0, 0x4B, 0x7B, 0x09, 0xE7, 0xE2, 0x77, 0x82, 0xD9, 0x10, 0x68, 0xC7, 0x50, 0x37, 0xCE, 0x10, 0xF3, 0x4C, 0xFE, 0x41, 0xA4, 0x65, 0x3F, 0x34, 0xAA, 0x69, 0x21, 0x12, 0x39, 0xCE, 0xCC, 0x44, 0x3A, 0x4B, 0x0B, 0x99, 0x29, 0x9A, 0xAB, 0x07, 0x7E, 0x9C, 0x77, 0xB3, 0x9A, 0x57, 0x89, 0x1C, 0x7A, 0x82, 0x99, 0xA1, 0x6B, 0x81, 0x34, 0xB0, 0x5A, 0x5F, 0x15, 0x1F, 0xE8, 0x31, 0xD6, 0xB4, 0x9D, 0xB1, 0xE2, 0xFA, 0x2F, 0xCC, 0xD9, 0x39, 0x8E, 0xFA, 0x4B, 0x30, 0x5F, 0xDB, 0xD1, 0xA7, 0xED, 0xD1, 0x74, 0x4A, 0x6C, 0xD9, 0x8F, 0xBF, 0x56, 0x56, 0x54, 0x39, 0x01, 0x64, 0x7D, 0xF5, 0x92, 0xCA, 0x2D, 0x80, 0xA4, 0xAF, 0x66, 0xC3, 0xC6, 0xFD, 0x9B, 0x2D, 0x07, 0x8C, 0xC2, 0xCB, 0x98, 0xB7, 0x01, 0x3B, 0xCD, 0x9D, 0x9B, 0xD6, 0xAA, 0xFC, 0xD0, 0x96, 0xC7, 0x66, 0x7B, 0x5A, 0xC1, 0x86, 0x7B, 0x66, 0xEF, 0x21, 0xCF, 0x9C, 0xFD, 0xB6, 0xB1, 0xF6, 0x7C, 0xA8, 0xB4, 0x80, 0x67, 0xA6, 0xBC, 0x8F, 0xD2, 0xBC, 0x33, 0xF4, 0x4E, 0xD2, 0x1E, 0x73, 0x9B, 0xF7, 0x17, 0xEF, 0xED, 0xFA, 0xFC, 0xEF, 0x47, 0x99, 0x20, 0x7D, 0x9F, 0x90, 0x37, 0xBE, 0x29, 0x92, 0x73, 0x57, 0x45, 0x92, 0x2A, 0x11, 0x31, 0x1F, 0x6B, 0x2F, 0xDC, 0x2F, 0xA9, 0xD3, 0x26, 0xE2, 0x4A, 0xB2, 0xF9, 0xCF, 0x7C, 0x4B, 0x2B, 0x34, 0xD2, 0xB3, 0x89, 0x7B, 0xA5, 0x47, 0x12, 0xF7, 0x60, 0xA1, 0xE2, 0x6B, 0x60, 0x6B, 0x0A, 0x00, 0x9B, 0x7C, 0x69, 0x21, 0xE2, 0xDD, 0x6C, 0xF6, 0x4C, 0x79, 0x13, 0xBE, 0xAB, 0x12, 0x7F, 0xB7, 0xE7, 0x2E, 0x1C, 0xC5, 0xF5, 0x57, 0xFF, 0xA0, 0x34, 0xA1, 0x4F, 0xDF, 0x00, 0xE3, 0x73, 0xD5, 0x3D, 0x4F, 0xDF, 0x99, 0x53, 0x38, 0xEB, 0x32, 0xEB, 0xF3, 0xF9, 0x6D, 0xF2, 0xA3, 0xF7, 0xE8, 0x7C, 0x38, 0x89, 0x73, 0x24, 0x4D, 0x12, 0x25, 0x62, 0xC5, 0x27, 0x60, 0x23, 0x6F, 0xC0, 0xD6, 0xC3, 0x2B, 0x3A, 0x78, 0xDD, 0xD8, 0xD8, 0x18, 0x47, 0xFB, 0xBD, 0x5A, 0x20, 0xE7, 0xF4, 0xAD, 0x15, 0x22, 0xEA, 0x7B, 0x7C, 0x2E, 0x42, 0xF5, 0x57, 0xBC, 0x84, 0x7C, 0xDF, 0x82, 0x2F, 0xD9, 0xB2, 0xE0, 0x43, 0xFB, 0x8C, 0xBA, 0x79, 0x4E, 0x42, 0x3D, 0x0D, 0xEA, 0xE3, 0xCB, 0x80, 0x94, 0x57, 0xB7, 0x2C, 0xA2, 0x2F, 0xC6, 0xC7, 0x8D, 0xF7, 0xE8, 0x0C, 0x31, 0x16, 0x74, 0x9C, 0xB1, 0xB1, 0xB8, 0x1D, 0x32, 0x48, 0xCF, 0xDC, 0x35, 0xD6, 0x12, 0xCB, 0x1F, 0xD2, 0xFE, 0x2C, 0x2F, 0xAE, 0x33, 0xE6, 0x3A, 0x9D, 0xDD, 0xE6, 0xFB, 0x06, 0xE7, 0x1C, 0xE9, 0x28, 0x11, 0xCB, 0x53, 0xD8, 0x5F, 0xD8, 0x03, 0x61, 0x63, 0xA5, 0x1F, 0xEB, 0xCC, 0xD1, 0xEF, 0x01, 0xDC, 0xE7, 0x49, 0x77, 0x89, 0x81, 0xF7, 0xB0, 0xA0, 0x39, 0x9F, 0xA9, 0x8D, 0x6E, 0xC6, 0x3B, 0x4F, 0xFB, 0xD0, 0xB9, 0x43, 0x21, 0xC7, 0xA1, 0xC2, 0xBC, 0xBB, 0xB9, 0x9D, 0xC8, 0xEB, 0x45, 0xFE, 0xBD, 0x9D, 0x38, 0x33, 0x57, 0x6A, 0xBF, 0xC8, 0xB7, 0xCD, 0xFA, 0x37, 0x0D, 0x8B, 0xDF, 0x38, 0x90, 0xC7, 0x59, 0x9A, 0xBC, 0xBF, 0x4A, 0x7D, 0xFC, 0x6B, 0x72, 0xDE, 0x96, 0x4B, 0x7E, 0xF4, 0x2F, 0xE5, 0xEB, 0xBA, 0xCE, 0xB4, 0xA5, 0xE3, 0x8B, 0xDA, 0x08, 0xED, 0x4F, 0xB6, 0xD2, 0x6B, 0x37, 0x6D, 0x73, 0xC9, 0xEA, 0x6B, 0x54, 0xEE, 0xAA, 0x3F, 0x0E, 0x82, 0xDF, 0x0E, 0x15, 0xA4, 0x1C, 0x1A, 0xE8, 0x5A, 0xB2, 0xFA, 0x6F, 0x7C, 0x53, 0xC0, 0x01, 0x49, 0xCF, 0x35, 0x7A, 0xB6, 0xA1, 0x2D, 0x2D, 0xDD, 0xDE, 0x38, 0xAB, 0x26, 0xBF, 0xAA, 0x64, 0xBE, 0x7F, 0x59, 0x49, 0x7E, 0xBA, 0xAA, 0x24, 0x53, 0x9F, 0xAE, 0xEF, 0x8B, 0xCB, 0x1B, 0xFB, 0x4D, 0x71, 0x1C, 0x26, 0x09, 0xFC, 0xBD, 0x85, 0x3A, 0xCF, 0x03, 0x57, 0xB4, 0xFD, 0xBD, 0xF4, 0xC6, 0xFE, 0xD9, 0xF6, 0x7F, 0xC6, 0xCE, 0xBE, 0x55, 0xDC, 0x0F, 0xC6, 0xF4, 0xFA, 0x58, 0xFC, 0x43, 0x6A, 0x3F, 0xAB, 0x76, 0x17, 0xF7, 0x71, 0x0D, 0x82, 0x3A, 0x34, 0xC7, 0x70, 0x8E, 0xE2, 0xD9, 0xFA, 0xB6, 0xF4, 0xE9, 0xC8, 0xC6, 0xD9, 0x75, 0x7F, 0x79, 0x7A, 0xC7, 0xE2, 0x7D, 0x1D, 0x9D, 0x83, 0xBE, 0xAE, 0xF8, 0x11, 0x8C, 0x7F, 0x06, 0x63, 0xD6, 0x19, 0x86, 0xF5, 0x57, 0x32, 0x98, 0x0B, 0x7B, 0x8E, 0xFA, 0xE8, 0x4F, 0x42, 0x45, 0x88, 0x7D, 0xFD, 0x0B, 0xE5, 0xCF, 0x82, 0x05, 0x0B, 0x16, 0x2C, 0x58, 0xB0, 0x60, 0xC1, 0x82, 0x05, 0x0B, 0x16, 0x2C, 0x58, 0xB0, 0x60, 0xC1, 0x82, 0x05, 0x0B, 0x16, 0x2C, 0x58, 0xB0, 0x60, 0xC1, 0x82, 0x05, 0x0B, 0x16, 0x2C, 0x58, 0xB0, 0x60, 0xC1, 0x82, 0x05, 0x0B, 0xFF, 0xBF, 0xE8, 0xC0, 0x7F, 0x46, 0xA3, 0xFF, 0xD8, 0x1E, 0x5E, 0x1D, 0x98, 0xFD, 0x37
        };
    }
}
